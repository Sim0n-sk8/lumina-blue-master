"use client"

import localFont from "next/font/local";
import "./globals.css";
import { SiteSettingsProvider, useSiteSettings } from './context/SiteSettingsContext';
import { useState, useEffect } from "react";

// Default metadata
export const metadata = {
  title: 'Lumina Blue',
  description: 'Generated by create next app',
  openGraph: {
    title: 'Lumina Blue',
    description: 'Your website description',
    url: 'https://yourwebsite.com/',
    images: [
      {
        url: '/default-og-image.jpg', // Add a default image to your public folder
        width: 1200,
        height: 630,
      },
    ],
  },
  twitter: {
    card: 'summary_large_image',
    title: 'Lumina Blue',
    description: 'Your website description',
    images: ['/default-og-image.jpg'],
  },
};

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});

const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

function LayoutContent({ children }) {
  const { siteSettings, isLoading } = useSiteSettings();
  const [title, setTitle] = useState("Lumina Blue");
  const [ogImage, setOgImage] = useState('/default-og-image.jpg');

  useEffect(() => {
    if (siteSettings?.name) {
      setTitle(siteSettings.name);
      // Update metadata
      metadata.title = siteSettings.name;
      metadata.openGraph.title = siteSettings.name;
      metadata.twitter.title = siteSettings.name;
    }
    
    // Update image if available
    const bannerImage = siteSettings?.banners?.[0]?.bannerImg;
    if (bannerImage) {
      const fullImageUrl = `https://www.eyecareportal.com${bannerImage}`;
      setOgImage(fullImageUrl);
      metadata.openGraph.images[0].url = fullImageUrl;
      metadata.twitter.images[0] = fullImageUrl;
    }
  }, [siteSettings]);

  return (
    <html lang="en">
      <head>
        <title>{isLoading ? "Loading..." : title}</title>
        <meta name="description" content="Generated by create next app" />
        <meta property="og:type" content="website" />
        <meta property="og:url" content="https://yourwebsite.com/" />
        <meta property="og:title" content={isLoading ? "Loading..." : title} />
        <meta property="og:description" content="Your website description" />
        <meta property="og:image" content={ogImage} />
        <meta property="og:image:width" content="1200" />
        <meta property="og:image:height" content="630" />
        <meta property="twitter:card" content="summary_large_image" />
        <meta property="twitter:url" content="https://yourwebsite.com/" />
        <meta property="twitter:title" content={isLoading ? "Loading..." : title} />
        <meta property="twitter:description" content="Your website description" />
        <meta property="twitter:image" content={ogImage} />
      </head>
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased flex flex-col min-h-screen w-full`}>
        <main className="flex-grow w-full relative">
          {children}
        </main>
      </body>
    </html>
  );
}

export default function RootLayout({ children }) {
  return (
    <SiteSettingsProvider>
      <LayoutContent>{children}</LayoutContent>
    </SiteSettingsProvider>
  );
}
